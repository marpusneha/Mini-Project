# -*- coding: utf-8 -*-
"""ANN_breast_cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iJ2Z75GL7NEBEc-httsgULDlwZRkA6fm

**IMPORTING LIBRARIES & DATASET**
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('data.csv')

"""**ANALYZING THE DATASET**"""

def dataSetAnalysis(df):
    #view starting values of data set
    print("Dataset Head")
    print(df.head(3))
    print("=" * 30)

    # View features in data set
    print("Dataset Features")
    print(df.columns.values)
    print("=" * 30)
     # View How many samples and how many missing values for each feature
    print("Dataset Features Details")
    print(df.info())
    print("=" * 30)
    # view distribution of numerical features across the data set
    print("Dataset Numerical Features")
    print(df.describe())
    print("=" * 30)
    # view distribution of categorical features across the data set
    print("Dataset Categorical Features")
    print(df.describe(include=['O']))
    print("=" * 30)

dataSetAnalysis(dataset)

X = dataset.iloc[:,2:32] # [all rows, col from index 2 to the last one excluding 'Unnamed: 32']
y = dataset.iloc[:,1] # [all rows, col one only which contains the classes of cancer]

"""

**ENCODED LABELS**"""

from sklearn.preprocessing import LabelEncoder

print("Before encoding: ")
print(y[100:110])

labelencoder_Y = LabelEncoder()
y = labelencoder_Y.fit_transform(y)

print("\nAfter encoding: ")
print(y[100:110])

"""**TRAIN AND TEST THE DATASET**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""**PREPROCESSING USING StandardScaler**"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""**BUILD ANN MODEL**"""

from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential() # Initialising the ANN

classifier.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu', input_dim = 30))
classifier.add(Dense(units = 8, kernel_initializer = 'uniform', activation = 'relu'))
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

"""**COMPILE THE MODEL**"""

classifier.compile(optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = ['accuracy'])

classifier.fit(X_train, y_train, batch_size = 1, epochs = 100)

"""**SAVE TRAINED MODEL**"""

from keras.models import load_model

classifier.save('breast_cancer_model.h5') #Save trained ANN
#classifier = load_model('breast_cancer_model.h5')  #Load trained ANN

y_pred = classifier.predict(X_test)
y_pred = [ 1 if y>=0.5 else 0 for y in y_pred ]

"""**MODEL ACCURACY**"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)

accuracy = (cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])
print("Accuracy: "+ str(accuracy*100)+"%")

"""USING SAVED MODEL FOR PREDICTIONS"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder
from keras.models import load_model

# Load the trained model
classifier = load_model('breast_cancer_model.h5')

# Load the StandardScaler and LabelEncoder
scaler = StandardScaler()
label_encoder = LabelEncoder()

# Function to preprocess input data
def preprocess_input_data(data):
    # Scale numerical features
    processed_data = scaler.transform(data)
    return processed_data

# Function to make predictions
def predict_samples(data):
    processed_data = preprocess_input_data(data)
    predictions = classifier.predict(processed_data)
    predictions = [1 if y >= 0.5 else 0 for y in predictions]
    return predictions

# Function to decode predictions
def decode_predictions(predictions):
    decoded_predictions = label_encoder.fit_transform(predictions)
    return decoded_predictions

# Get input features from the user
input_data = pd.DataFrame(columns=['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean', 'smoothness_mean',
    'compactness_mean', 'concavity_mean', 'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',
    'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se', 'compactness_se', 'concavity_se',
    'concave points_se', 'symmetry_se', 'fractal_dimension_se', 'radius_worst', 'texture_worst',
    'perimeter_worst', 'area_worst', 'smoothness_worst', 'compactness_worst', 'concavity_worst',
    'concave points_worst', 'symmetry_worst'])

# Prompt the user for input features
for feature in input_data.columns:
    value = input(f"Enter the value for {feature}: ")
    input_data[feature] = [value]

# Convert column names to strings
input_data.columns = input_data.columns.astype(str)

# Select relevant features based on training data columns
selected_features = X_train[:, :30]  # Assuming the first 3 columns of X_train correspond to the input features

# Fit the StandardScaler on the training data
scaler.fit(selected_features)

# Make predictions on the new samples
predictions = predict_samples(selected_features)

# Decode the predictions
decoded_predictions = decode_predictions(predictions)

# Map the predictions to 'M' or 'B'
diagnosis_predictions = ['M' if pred == 'M' else 'B' for pred in decoded_predictions]

if 'M' in diagnosis_predictions:
    print("You have a malignant (M) tumor.")
else:
    print("You have a benign (B) tumor.")

# Print the predictions

import matplotlib.pyplot as plt

# Count the occurrences of each tumor type
diagnosis_counts = pd.Series(diagnosis_predictions).value_counts()

# Create a bar plot
plt.bar(diagnosis_counts.index, diagnosis_counts.values)

# Set labels and title
plt.xlabel('Tumor Type')
plt.ylabel('Count')
plt.title('Predicted Tumor Types')

# Show the plot
plt.show()